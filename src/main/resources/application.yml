spring:
  application:
    name: techefx-product-enquiry-service
#  sleuth:
#      enabled: true
#  zipkin:
#      enabled: true
#      base-url: ${ZIPKIN_SERVER:http://localhost:9411/}

server:
  port: ${port:8700}

#eureka:
#  client:
#    serviceUrl:
#      defaultZone: ${EUREKA_SERVER:http://localhost:8761/eureka}
#
#management:
#  endpoints:
#    web:
#      exposure:
#        include: "*"
#  endpoint:
#    health:
#      show-details: always


#techefx-product-stock-service:
#  ribbon:
#    listOfServers: http://localhost:8800, http://localhost:8801

# This solution of load balancing with Ribbon has got some limitations as whenever we add/remove instance of techefx-product-stock-service,  we have to come to microservice
# properties and make the required changes which we definitely would not like to do in real time production environment. So to get rid of this, we can use eureka naming and
# registry server. It balances the load b/w multiple instances of a service without enabling or configuring anything extra to service. If we have Eureka Naming Server added
# in our dependency i.e. pom.xml then although if we have properties added for Ribbon Load balancer then also it'll pick instances of service from Eureka registry only.